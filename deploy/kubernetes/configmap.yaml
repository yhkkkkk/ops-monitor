apiVersion: v1
kind: ConfigMap
metadata:
  name: watchalert
  namespace: default
data:
  config.yaml: |
    Server:
      port: "9001"
      # 定义相同的Group之间发送告警通知的时间间隔(s), 组内有告警就一起发出, 没有则单独发出.
      # 第一次产生的告警, 等待10s（为了防止在等待期间,还没有推送告警消息期间这时告警消失了触发了恢复消息）
      groupWait: 10
      # 第二次产生的告警, 等待120s（为了保证告警聚合性相同时间段的告警一起发送）
      groupInterval: 120

    MySQL:
      host: 127.0.0.1
      port: 3306
      user: root
      pass: semaik1023
      dbName: watchalert
      timeout: 10s

    Redis:
      host: 127.0.0.1
      port: 6379
      pass: ""

    Jwt:
      # 失效时间
      expire: 18000

  nginx.conf: |-
    server {
        listen 80;

        root /app;
        index index.html index.htm;

        location / {
            add_header Access-Control-Allow-Origin *;
            add_header Access-Control-Allow-Methods 'GET, POST, OPTIONS';
            add_header Access-Control-Allow-Headers 'DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization';

            try_files $uri $uri/ /index.html;
        }

        location /api {
            add_header Access-Control-Allow-Origin *;
            add_header Access-Control-Allow-Methods 'GET, POST, OPTIONS';
            add_header Access-Control-Allow-Headers 'DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization';

            resolver 8.8.8.8;
            #error Connection timed out and 504 error
            client_max_body_size 100m;
            fastcgi_connect_timeout 300;
            fastcgi_read_timeout 300;
            fastcgi_send_timeout 300;
            fastcgi_buffer_size 64k;
            fastcgi_buffers   4 32k;
            fastcgi_busy_buffers_size 64k;
            fastcgi_temp_file_write_size 64k;

            proxy_ssl_server_name on;
            proxy_read_timeout 240s;
            proxy_ssl_protocols TLSv1.2;
            proxy_pass http://$host:30901;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header Content-Type "application/json";
            proxy_set_body $request_body;
            proxy_pass_request_headers on;
            proxy_request_buffering off;
        }

        error_page 500 502 503 504 /500.html;
        client_max_body_size 20M;
        keepalive_timeout 10;
    }